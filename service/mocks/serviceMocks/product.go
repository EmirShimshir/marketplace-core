// Code generated by mockery v2.42.2. DO NOT EDIT.

package serviceMocks

import (
	context "context"

	"github.com/EmirShimshir/marketplace-core/domain"
	mock "github.com/stretchr/testify/mock"

	"github.com/EmirShimshir/marketplace-core/port"
)

// ProductService is an autogenerated mock type for the IProductService type
type ProductService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, param
func (_m *ProductService) Create(ctx context.Context, param port.CreateProductParam) (domain.Product, error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, port.CreateProductParam) (domain.Product, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, port.CreateProductParam) domain.Product); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, port.CreateProductParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, productID
func (_m *ProductService) Delete(ctx context.Context, productID domain.ID) error {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, limit, offset
func (_m *ProductService) Get(ctx context.Context, limit int64, offset int64) ([]domain.Product, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]domain.Product, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []domain.Product); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, productID
func (_m *ProductService) GetByID(ctx context.Context, productID domain.ID) (domain.Product, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) (domain.Product, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) domain.Product); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, productID, param
func (_m *ProductService) Update(ctx context.Context, productID domain.ID, param port.UpdateProductParam) (domain.Product, error) {
	ret := _m.Called(ctx, productID, param)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID, port.UpdateProductParam) (domain.Product, error)); ok {
		return rf(ctx, productID, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID, port.UpdateProductParam) domain.Product); ok {
		r0 = rf(ctx, productID, param)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID, port.UpdateProductParam) error); ok {
		r1 = rf(ctx, productID, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
