// Code generated by mockery v2.42.2. DO NOT EDIT.

package serviceMocks

import (
	context "context"

	"github.com/EmirShimshir/marketplace-core/domain"
	mock "github.com/stretchr/testify/mock"

	"github.com/EmirShimshir/marketplace-core/port"
)

// ShopService is an autogenerated mock type for the IShopService type
type ShopService struct {
	mock.Mock
}

// CreateShop provides a mock function with given fields: ctx, sellerID, param
func (_m *ShopService) CreateShop(ctx context.Context, sellerID domain.ID, param port.CreateShopParam) (domain.Shop, error) {
	ret := _m.Called(ctx, sellerID, param)

	if len(ret) == 0 {
		panic("no return value specified for CreateShop")
	}

	var r0 domain.Shop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID, port.CreateShopParam) (domain.Shop, error)); ok {
		return rf(ctx, sellerID, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID, port.CreateShopParam) domain.Shop); ok {
		r0 = rf(ctx, sellerID, param)
	} else {
		r0 = ret.Get(0).(domain.Shop)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID, port.CreateShopParam) error); ok {
		r1 = rf(ctx, sellerID, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateShopItem provides a mock function with given fields: ctx, param
func (_m *ShopService) CreateShopItem(ctx context.Context, param port.CreateShopItemParam) (domain.ShopItem, error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for CreateShopItem")
	}

	var r0 domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, port.CreateShopItemParam) (domain.ShopItem, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, port.CreateShopItemParam) domain.ShopItem); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(domain.ShopItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, port.CreateShopItemParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteShop provides a mock function with given fields: ctx, shopID
func (_m *ShopService) DeleteShop(ctx context.Context, shopID domain.ID) error {
	ret := _m.Called(ctx, shopID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) error); ok {
		r0 = rf(ctx, shopID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteShopItem provides a mock function with given fields: ctx, shopItemID
func (_m *ShopService) DeleteShopItem(ctx context.Context, shopItemID domain.ID) error {
	ret := _m.Called(ctx, shopItemID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShopItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) error); ok {
		r0 = rf(ctx, shopItemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetShopByID provides a mock function with given fields: ctx, shopID
func (_m *ShopService) GetShopByID(ctx context.Context, shopID domain.ID) (domain.Shop, error) {
	ret := _m.Called(ctx, shopID)

	if len(ret) == 0 {
		panic("no return value specified for GetShopByID")
	}

	var r0 domain.Shop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) (domain.Shop, error)); ok {
		return rf(ctx, shopID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) domain.Shop); ok {
		r0 = rf(ctx, shopID)
	} else {
		r0 = ret.Get(0).(domain.Shop)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, shopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopBySellerID provides a mock function with given fields: ctx, sellerID
func (_m *ShopService) GetShopBySellerID(ctx context.Context, sellerID domain.ID) ([]domain.Shop, error) {
	ret := _m.Called(ctx, sellerID)

	if len(ret) == 0 {
		panic("no return value specified for GetShopBySellerID")
	}

	var r0 []domain.Shop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) ([]domain.Shop, error)); ok {
		return rf(ctx, sellerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) []domain.Shop); ok {
		r0 = rf(ctx, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Shop)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopItemByID provides a mock function with given fields: ctx, shopItemID
func (_m *ShopService) GetShopItemByID(ctx context.Context, shopItemID domain.ID) (domain.ShopItem, error) {
	ret := _m.Called(ctx, shopItemID)

	if len(ret) == 0 {
		panic("no return value specified for GetShopItemByID")
	}

	var r0 domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) (domain.ShopItem, error)); ok {
		return rf(ctx, shopItemID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) domain.ShopItem); ok {
		r0 = rf(ctx, shopItemID)
	} else {
		r0 = ret.Get(0).(domain.ShopItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, shopItemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopItemByProductID provides a mock function with given fields: ctx, productID
func (_m *ShopService) GetShopItemByProductID(ctx context.Context, productID domain.ID) (domain.ShopItem, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetShopItemByProductID")
	}

	var r0 domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) (domain.ShopItem, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) domain.ShopItem); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Get(0).(domain.ShopItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopItems provides a mock function with given fields: ctx, limit, offset
func (_m *ShopService) GetShopItems(ctx context.Context, limit int64, offset int64) ([]domain.ShopItem, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetShopItems")
	}

	var r0 []domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]domain.ShopItem, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []domain.ShopItem); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ShopItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShops provides a mock function with given fields: ctx, limit, offset
func (_m *ShopService) GetShops(ctx context.Context, limit int64, offset int64) ([]domain.Shop, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetShops")
	}

	var r0 []domain.Shop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]domain.Shop, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []domain.Shop); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Shop)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateShop provides a mock function with given fields: ctx, shopID, param
func (_m *ShopService) UpdateShop(ctx context.Context, shopID domain.ID, param port.UpdateShopParam) (domain.Shop, error) {
	ret := _m.Called(ctx, shopID, param)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShop")
	}

	var r0 domain.Shop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID, port.UpdateShopParam) (domain.Shop, error)); ok {
		return rf(ctx, shopID, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID, port.UpdateShopParam) domain.Shop); ok {
		r0 = rf(ctx, shopID, param)
	} else {
		r0 = ret.Get(0).(domain.Shop)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID, port.UpdateShopParam) error); ok {
		r1 = rf(ctx, shopID, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateShopItem provides a mock function with given fields: ctx, shopItemID, param
func (_m *ShopService) UpdateShopItem(ctx context.Context, shopItemID domain.ID, param port.UpdateShopItemParam) (domain.ShopItem, error) {
	ret := _m.Called(ctx, shopItemID, param)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShopItem")
	}

	var r0 domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID, port.UpdateShopItemParam) (domain.ShopItem, error)); ok {
		return rf(ctx, shopItemID, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID, port.UpdateShopItemParam) domain.ShopItem); ok {
		r0 = rf(ctx, shopItemID, param)
	} else {
		r0 = ret.Get(0).(domain.ShopItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID, port.UpdateShopItemParam) error); ok {
		r1 = rf(ctx, shopItemID, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewShopService creates a new instance of ShopService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShopService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShopService {
	mock := &ShopService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
